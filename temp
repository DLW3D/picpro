# Word Enbedding
from keras.layers import Embedding

# The Embedding layer takes at least two arguments:
# the number of possible tokens, here 1000 (1 + maximum word index),
# and the dimensionality of the embeddings, here 64.
embedding_layer = Embedding(1000, 64)

from keras.datasets import imdb
from keras import preprocessing

# 特征数(每个词)
max_features = 10000
# 最大长度
maxlen = 20

# 加载数据集
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

# 只截取前(数据上是后)maxlen个词
x_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)
x_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)

# 建模
from keras.models import Sequential
from keras.layers import Flatten, Dense

model = Sequential()
# 指定嵌入层最大输入长度
# input (?, maxlen)
model.add(Embedding(10000, 8, input_length=maxlen))
# (?, maxlen, 8)
model.add(Flatten())
# (?, maxlen * 8)
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])
model.summary()

history = model.fit(x_train, y_train,
                    epochs=10,
                    batch_size=32,
                    validation_split=0.2)




