# 数据预处理
from keras.datasets import imdb
from keras.preprocessing import sequence

max_features = 10000  # 最多编码词数
maxlen = 500  # 样本最长词数

print('Loading data...')
(input_train, y_train), (input_test, y_test) = imdb.load_data(num_words=max_features)
print(len(input_train), 'train sequences')
print(len(input_test), 'test sequences')

print('Pad sequences (samples x time)')
input_train = sequence.pad_sequences(input_train, maxlen=maxlen)
input_test = sequence.pad_sequences(input_test, maxlen=maxlen)
print('input_train shape:', input_train.shape)
print('input_test shape:', input_test.shape)


# 建模
# from keras.models import Sequential
# from keras.layers import Embedding, SimpleRNN, Dense, LSTM
#
# model = Sequential()
# # (?, maxlen)
# model.add(Embedding(max_features, 32))
# # (?, maxlen, 32)
# # model.add(SimpleRNN(32, return_sequences=True))
# # # (?, maxlen, 32)
# # model.add(SimpleRNN(32))
# # # (?, 32)
# model.add(LSTM(32))
# # # (?, 32)
# model.add(Dense(1, activation='sigmoid'))
#
# model.summary()
#
# model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])
# history = model.fit(input_train, y_train,
#                     epochs=10,
#                     batch_size=128,
#                     validation_split=0.2)

# ************* 双向RNN
from keras.models import Sequential
from keras import layers
from keras import backend as K
K.clear_session()

model = Sequential()
model.add(layers.Embedding(max_features, 32))
model.add(layers.Bidirectional(layers.LSTM(32)))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])
history = model.fit(input_train, y_train, epochs=10, batch_size=128, validation_split=0.2)
